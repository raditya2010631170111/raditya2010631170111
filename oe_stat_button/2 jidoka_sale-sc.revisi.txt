from itertools import groupby
from odoo.exceptions import AccessError, UserError, ValidationError
from odoo.tools import float_is_zero, float_compare

	sc.revisi
	
	def action_invoice_create(self):
        sale_line_obj = self.env['sale.order.line']
        for revisi in self:
            invoice_line_values = { # Buat baris faktur untuk sc.revisi
                'product_id': revisi.product_id.id,
                'name': revisi.name,
                'quantity': 1,
                'price_unit': revisi.amount,
            }
            invoice_line = sale_line_obj.create(invoice_line_values)

            invoice_values = { # Buat faktur untuk sc.revisi
                'partner_id': revisi.partner_id.id,
                'invoice_line_ids': [(6, 0, [invoice_line.id])],
            }
            invoice = self.env['account.move'].create(invoice_values)

        return True
		
    @api.model
    def _get_default_team(self):
        return self.env['crm.team']._get_default_team_id()
		
    delivery_count = fields.Integer(string='Delivery Orders', compute='_compute_delivery_count')
    picking_ids = fields.One2many('stock.picking', 'sale_id', string='Transfers')
    invoice_count = fields.Integer(string='Invoice Count', compute='_get_invoiced', readonly=True)
    order_line = fields.One2many('sale.order.line', 'order_id', string='Order Lines', states={'cancel': [('readonly', True)], 'done': [('readonly', True)]}, copy=True, auto_join=True)
    mrp_production_count = fields.Integer(
        "Count of MO generated",
        compute='_compute_mrp_production_count',
        groups='mrp.group_mrp_user')
    procurement_group_id = fields.Many2one('procurement.group', 'Procurement Group', copy=False)
    company_id = fields.Many2one('res.company', 'Company', required=True, index=True, default=lambda self: self.env.company)
    client_order_ref = fields.Char(string='Customer Reference', copy=False)
    note = fields.Text('Terms and conditions')
    fiscal_position_id = fields.Many2one(
        'account.fiscal.position', string='Fiscal Position',
        domain="[('company_id', '=', company_id)]", check_company=True,
        help="Fiscal positions are used to adapt taxes and accounts for particular customers or sales orders/invoices."
        "The default value comes from the customer.")
    team_id = fields.Many2one(
        'crm.team', 'Sales Team',
        change_default=True, default=_get_default_team, check_company=True,  # Unrequired company
        domain="['|', ('company_id', '=', False), ('company_id', '=', company_id)]")
    is_downpayment = fields.Boolean(
        string="Is a down payment", help="Down payments are made when creating invoices from a sales order."
        " They are not copied when duplicating a sales order.")
    currency_id = fields.Many2one('res.currency', 
    string='currency'
    )
    amount_total = fields.Monetary(string='Total', store=True, readonly=True, compute='_amount_all', tracking=4)
    amount_untaxed = fields.Monetary(string='Untaxed Amount', store=True, readonly=True, compute='_amount_all', tracking=5)
    amount_tax = fields.Monetary(string='Taxes', store=True, readonly=True, compute='_amount_all')

	def sr(self):
        self.write({'state' : 'sr'}) 
		
        picking_vals = { # stock picking
            'partner_id': self.partner_id.id,
            'picking_type_id': self.env.ref('stock.picking_type_out').id,
            'origin': self.name,
            'group_id': self.env['procurement.group'].create({}).id, 
            'location_id': self.partner_id.property_stock_customer.id,
            'location_dest_id': self.env.ref('stock.stock_location_customers').id,
        }
        picking = self.env['stock.picking'].create(picking_vals)

        vals = {
            'partner_id' : self.partner_id.id,
            'partner_invoice_id' : self.partner_invoice_id.id,
            'partner_shipping_id' : self.partner_shipping_id.id,
            'country_of_deliver' : self.country_of_deliver.id,
            'buyer_po' : self.buyer_po,
            'department_id' : self.department_id.id,
            'origin' : self.origin,
            'destination_id' : self.destination_id.id,
            'date_order' : self.date_order,
            'date_o' : self.date_order,
            'pricelist_id' : self.pricelist_id.id,
            'term_id' : self.term_id.id,
            'payment_term_id' : self.payment_term_id.id,
            'notes_sale_id' : self.notes_sale_id.id,
            'no_ckwi' : self.name,
            'certification_id' : self.certification_id.id,
        }
        new_record = self.env['sc.revisi'].create(vals)

        #mrp Production
        for line in self.order_line_ids:
            bom_id = line.product_id.bom_ids[0].id if line.product_id.bom_ids else False
            move_line_mrp_vals = { 
                'origin': self.name,
                'product_id': line.product_id.id,
                'product_uom_id': line.product_uom.id,
                'bom_id': bom_id,
            }
            self.env['mrp.production'].create(move_line_mrp_vals)

        for line in self.order_line_ids: #stock PIking
            move_vals = {
                'name': line.product_id.display_name,
                'product_id': line.product_id.id,
                'product_uom_qty': line.product_uom_qty,
                'product_uom': line.product_uom.id,
                'picking_id': picking.id,
                'location_id': self.partner_id.property_stock_customer.id,
                'location_dest_id': self.env.ref('stock.stock_location_customers').id,
            }
            move = self.env['stock.move'].create(move_vals)
            move._action_confirm()
            move._action_assign()

        line_vals = []
        for ol in self.order_line_ids: 
            line_vals.append((0,0,{
                'product_template_id': ol.product_template_id.id,
                'product_id': ol.product_id.id,
                'material_finish_id': ol.material_finish_id.id,
                'finish_id': ol.finish_id.id,
                'sku': ol.sku,
                'request_date': ol.request_date,
                'cont_load': ol.cont_load,
                'product_uom_qty':ol.product_uom_qty,
                'product_uom':ol.product_uom.id,
                'name': ol.name,
                'william_fob_price': ol.william_fob_price,
                'william_set_price': ol.william_set_price,
                'packing_size_p': ol.packing_size_p,
                'packing_size_l': ol.packing_size_l,
                'packing_size_t': ol.packing_size_t,
                'qty_carton': ol.qty_carton,
                'cu_ft': ol.cu_ft,
                'inch_40': ol.inch_40,
                'inch_40_hq': ol.inch_40_hq,
            }))
        new_record.write({'order_line_ids': line_vals})
        return True
		
	def action_view_delivery(self):
        context = {
            'default_partner_id': self.partner_id.id,
            'default_origin': self.name,
        }

        domain = []
        if self.name:
            domain = [('origin', '=', self.name)]

        return {
            'type': 'ir.actions.act_window',
            'name': 'Delivery',
            'view_mode': 'tree,form',
            'res_model': 'stock.picking',
            'res_id': self.name,
            'domain': domain,
            'context': context,
        }
		
	@api.depends('picking_ids')
    def _compute_delivery_count(self):
        for order in self:
            new_picking_ids = self.env['stock.picking'].search([('origin', '=', order.name)])
            order.delivery_count = len(new_picking_ids)

    def action_view_invoice(self):
        context = {
            'default_move_type': 'out_invoice',
        }
        if len(self) == 1:
            context.update({
                'default_partner_id': self.partner_id.id,
                'default_partner_shipping_id': self.partner_shipping_id.id,
                'default_invoice_payment_term_id': self.payment_term_id.id or self.partner_id.property_payment_term_id.id or self.env['account.move'].default_get(['invoice_payment_term_id']).get('invoice_payment_term_id'),
                'default_invoice_origin': self.name,
            })

        domain = []
        if self.name:
            domain = [('origin', '=', self.name)]

        return {
            'type': 'ir.actions.act_window',
            'name': 'Invoice',
            'view_mode': 'tree,form',
            'res_model': 'account.move',
            'res_id': self.name,
            'domain': domain,
            'context': context,
        }
    
    @api.depends('order_line_ids')
    def _get_invoiced(self):
        for order in self:
            new_invoice_ids = self.env['account.move'].search([('origin', '=', order.name)])
            order.invoice_count = len(new_invoice_ids)


    def action_view_mrp_production(self):
        context = {
            'default_partner_id': self.partner_id.id,
            'default_origin': self.name,
        }
        domain = []
        if self.name:
            domain = [('origin', '=', self.name)]

        return {
            'type': 'ir.actions.act_window',
            'name': 'Manufacturing',
            'view_mode': 'tree,form',
            'res_model': 'mrp.production',
            'res_id':self.name,
            'domain': domain,
            'context': context,
        }

		@api.depends('order_line')
    def _compute_mrp_production_count(self):
        for order in self:
            mrp_productions = self.env['mrp.production'].search([('origin', '=', order.name)])
            order.mrp_production_count = len(mrp_productions)

    def _prepare_invoice(self):
        self.ensure_one()
        journal = self.env['account.move'].with_context(default_move_type='out_invoice')._get_default_journal()
        if not journal:
            raise UserError(_('Please define an accounting sales journal for the company %s (%s).') % (self.company_id.name, self.company_id.id))

        invoice_vals = {
            'ref': self.client_order_ref or '',
            'move_type': 'out_invoice',
            'narration': self.note,
            'currency_id': self.pricelist_id.currency_id.id,
            'team_id': self.team_id.id,
            'partner_id': self.partner_invoice_id.id,
            'partner_shipping_id': self.partner_shipping_id.id,
            'fiscal_position_id': (self.fiscal_position_id or self.fiscal_position_id.get_fiscal_position(self.partner_invoice_id.id)).id,
            'partner_bank_id': self.company_id.partner_id.bank_ids.filtered(lambda bank: bank.company_id.id in (self.company_id.id, False))[:1].id,
            'journal_id': journal.id,  # company comes from the journal
            'invoice_origin': self.name,
            'invoice_payment_term_id': self.payment_term_id.id,
            'invoice_line_ids': [],
            'company_id': self.company_id.id,
        }
        return invoice_vals
    
    def _get_invoice_grouping_keys(self):
        return ['company_id', 'partner_id', 'currency_id']


    def create_invoice(self):
        vals_invoice = {
            'move_type': 'out_invoice', 
            'partner_id': self.partner_id.id,
            'invoice_date': fields.Date.today(),
            'origin': self.name,
        }
        move = self.env['account.move'].create(vals_invoice)
        
        for line in self.order_line_ids:
            move_line_vals = {
                'move_id': move.id,
                'product_id': line.product_id.id,
                'quantity': line.product_uom_qty,
                'price_unit': line.william_fob_price,
                'account_id' : line.account_id.id
            }
            self.env['account.move.line'].create(move_line_vals)
        
        action = self.env.ref('account.action_move_out_invoice_type').read()[0]
        action['views'] = [(self.env.ref('account.view_move_form').id, 'form')]
        action['res_id'] = move.id
        
        return action
    
    def create_invoice_revisi(self):
         return {
            'type': 'ir.actions.act_window',
            'name': 'Revisi',
            'view_mode': 'form',
            'res_model': 'sale.advance.payment.inv.revisi',
            'target': 'new',
            }
    
    def _get_invoiceable_lines(self, final=False):
        down_payment_line_ids = []
        invoiceable_line_ids = []
        pending_section = None
        precision = self.env['decimal.precision'].precision_get('Product Unit of Measure')

        for line in self.order_line:
            if line.display_type == 'line_section':
                # Only invoice the section if one of its lines is invoiceable
                pending_section = line
                continue
            if line.display_type != 'line_note' and float_is_zero(line.qty_to_invoice, precision_digits=precision):
                continue
            if line.qty_to_invoice > 0 or (line.qty_to_invoice < 0 and final) or line.display_type == 'line_note':
                if line.is_downpayment:
                    # Keep down payment lines separately, to put them together
                    # at the end of the invoice, in a specific dedicated section.
                    down_payment_line_ids.append(line.id)
                    continue
                if pending_section:
                    invoiceable_line_ids.append(pending_section.id)
                    pending_section = None
                invoiceable_line_ids.append(line.id)

        return self.env['sc.revisi.line'].browse(invoiceable_line_ids + down_payment_line_ids)

    def _create_invoices(self, grouped=False, final=False, date=None):
        if not self.env['account.move'].check_access_rights('create', False):
            try:
                self.check_access_rights('write')
                self.check_access_rule('write')
            except AccessError:
                return self.env['account.move']

        invoice_vals_list = [] # 1) Create invoices.
        invoice_item_sequence = 0 # Incremental sequencing to keep the lines order on the invoice.
        for order in self:
            order = order.with_company(order.company_id)
            current_section_vals = None
            down_payments = order.env['sc.revisi.line']

            invoice_vals = order._prepare_invoice()
            invoiceable_lines = order._get_invoiceable_lines(final)

            if not any(not line.display_type for line in invoiceable_lines):
                continue

            invoice_line_vals = []
            down_payment_section_added = False
            for line in invoiceable_lines:
                if not down_payment_section_added and line.is_downpayment:
                    invoice_line_vals.append( # Create a dedicated section for the down payments (put at the end of the invoiceable_lines)
                        (0, 0, order._prepare_down_payment_section_line(
                            sequence=invoice_item_sequence,
                        )),
                    )
                    down_payment_section_added = True
                    invoice_item_sequence += 1
                invoice_line_vals.append(
                    (0, 0, line._prepare_invoice_line(
                        sequence=invoice_item_sequence,
                    )),
                )
                invoice_item_sequence += 1

            invoice_vals['invoice_line_ids'] += invoice_line_vals
            invoice_vals_list.append(invoice_vals)

        if not grouped: # 2) Manage 'grouped' parameter: group by (partner_id, currency_id).
            new_invoice_vals_list = []
            invoice_grouping_keys = self._get_invoice_grouping_keys()
            invoice_vals_list = sorted(invoice_vals_list, key=lambda x: [x.get(grouping_key) for grouping_key in invoice_grouping_keys])
            for grouping_keys, invoices in groupby(invoice_vals_list, key=lambda x: [x.get(grouping_key) for grouping_key in invoice_grouping_keys]):
                origins = set()
                payment_refs = set()
                refs = set()
                ref_invoice_vals = None
                for invoice_vals in invoices:
                    if not ref_invoice_vals:
                        ref_invoice_vals = invoice_vals
                    else:
                        ref_invoice_vals['invoice_line_ids'] += invoice_vals['invoice_line_ids']
                    origins.add(invoice_vals['invoice_origin'])
                    payment_refs.add(invoice_vals['payment_reference'])
                    refs.add(invoice_vals['ref'])
                ref_invoice_vals.update({
                    'ref': ', '.join(refs)[:2000],
                    'invoice_origin': ', '.join(origins),
                    'payment_reference': len(payment_refs) == 1 and payment_refs.pop() or False,
                })
                new_invoice_vals_list.append(ref_invoice_vals)
            invoice_vals_list = new_invoice_vals_list

        if len(invoice_vals_list) < len(self): # 3) Create invoices.
            SaleOrderLine = self.env['sc.revisi.line']
            for invoice in invoice_vals_list:
                sequence = 1
                for line in invoice['invoice_line_ids']:
                    line[2]['sequence'] = SaleOrderLine._get_invoice_line_sequence(new=sequence, old=line[2]['sequence'])
                    sequence += 1

        # Manage the creation of invoices in sudo because a salesperson must be able to generate an invoice from a
        # sale order without "billing" access rights. However, he should not be able to create an invoice from scratch.
        moves = self.env['account.move'].sudo().with_context(default_move_type='out_invoice').create(invoice_vals_list)

        # 4) Some moves might actually be refunds: convert them if the total amount is negative
        # We do this after the moves have been created since we need taxes, etc. to know if the total
        # is actually negative or not
        if final:
            moves.sudo().filtered(lambda m: m.amount_total < 0).action_switch_invoice_into_refund_credit_note()
        for move in moves:
            move.message_post_with_view('mail.message_origin_link',
                values={'self': move, 'origin': move.line_ids.mapped('sale_line_ids.order_id')},
                subtype_id=self.env.ref('mail.mt_note').id
            )
        return moves
    
    @api.onchange('fiscal_position_id')
    def _compute_tax_id(self):
        for order in self:
            order.order_line._compute_tax_id()

    @api.onchange('partner_shipping_id', 'partner_id', 'company_id')
    def onchange_partner_shipping_id(self):
        self.fiscal_position_id = self.env['account.fiscal.position'].with_company(self.company_id).get_fiscal_position(self.partner_id.id, self.partner_shipping_id.id)
        return {}

   
    @api.onchange('partner_id')
    def onchange_partner_id(self):
        if not self.partner_id:
            self.update({
                'partner_invoice_id': False,
                'partner_shipping_id': False,
                'fiscal_position_id': False,
            })
            return

        self = self.with_company(self.company_id)

        addr = self.partner_id.address_get(['delivery', 'invoice'])
        partner_user = self.partner_id.user_id or self.partner_id.commercial_partner_id.user_id
        values = {
            'pricelist_id': self.partner_id.property_product_pricelist and self.partner_id.property_product_pricelist.id or False,
            'payment_term_id': self.partner_id.property_payment_term_id and self.partner_id.property_payment_term_id.id or False,
            'partner_invoice_id': addr['invoice'],
            'partner_shipping_id': addr['delivery'],
        }
        user_id = partner_user.id
        if not self.env.context.get('not_self_saleperson'):
            user_id = user_id or self.env.context.get('default_user_id', self.env.uid)
        if user_id and self.user_id.id != user_id:
            values['user_id'] = user_id

        if self.env['ir.config_parameter'].sudo().get_param('account.use_invoice_terms') and self.env.company.invoice_terms:
            values['note'] = self.with_context(lang=self.partner_id.lang).env.company.invoice_terms
        if not self.env.context.get('not_self_saleperson') or not self.team_id:
            values['team_id'] = self.env['crm.team'].with_context(
                default_team_id=self.partner_id.team_id.id
            )._get_default_team_id(domain=['|', ('company_id', '=', self.company_id.id), ('company_id', '=', False)], user_id=user_id)
        self.update(values)

    @api.onchange('user_id')
    def onchange_user_id(self):
        if self.user_id:
            self.team_id = self.env['crm.team'].with_context(
                default_team_id=self.team_id.id
            )._get_default_team_id(user_id=self.user_id.id)

    @api.depends('order_line_ids.price_total')
    def _amount_all(self):
        for order in self:
            amount_untaxed = amount_tax = 0.0
            for line in order.order_line:
                amount_untaxed += line.price_subtotal
                amount_tax += line.price_tax
            order.update({
                'amount_untaxed': amount_untaxed,
                'amount_tax': amount_tax,
                'amount_total': amount_untaxed + amount_tax,
            })
