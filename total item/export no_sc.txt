tambahan di export
- SC sudah dipilih pada dokumen 1 maka ketika membuat SI baru dengan SC yg sama akn langsung tampil sisa produk yg sudah dipilih sebelumnya
ex : SI001 > pilih SC001 (ada 10 product) > yg dipilih product 1 2 3 4 5 6
SI001 > pilih SC001 > yg tampil sisa dari product yang belum dibuatkan SI nya > sisa product 7 8 9 10
- SI validate tetap di form SI dengan tanda 1 pada smart button packing list, biarkan masuk ke PL dengan klik manual oleh user

invoice
no_sc_ids = fields.Many2many(
        string='No SC',
        comodel_name='sale.order',
        relation='invoice_nosc_order_rel',
        column1='invoice_id',
        column2='order_id',
    )
	
packing.list
	no_sc_ids = fields.Many2many(
        string='No SC',
        comodel_name='sale.order',
        relation='packinglist_nosc_order_rel',
        column1='packing_list_id',
        column2='order_id',
    )


    available_order_line_ids = fields.Many2many(
        string='Available Order Line',
        comodel_name='sale.order.line',
        relation='packing_list_available_order_line_order_rel',
        column1='packing_list_id',
        column2='order_line_id', 
            compute='_compute_available_order_line_ids' )

    @api.depends('no_sc_ids.order_line')
    def _compute_available_order_line_ids(self):
        for shipping_ins in self:
            order_lines = shipping_ins.no_sc_ids.mapped('order_line')
            shipping_ins.available_order_line_ids = order_lines
			
	def action_done(self):
			invoice_list = self.env['invoice'].create({
                'no_sc_ids': self.no_sc_ids,
PI.container
    order_ids = fields.Many2many('sale.order', 'container_operation_sale_order_rel', string='order')
	
    @api.depends('order_ids')
    def _get_available_picking(self):
        for operation in self:
            picking_ids = self.env['stock.picking'].search([
                ('sale_id', 'in', operation.order_ids.ids),
                ('state', '=', 'done')
            ])
            operation.available_picking_ids = picking_ids.ids

    @api.onchange('container_no')
    def onchange_container_no(self):
        if self.container_no:
            self.order_ids = self.packing_id.no_sc_ids.ids
				
SI
    no_sc_ids = fields.Many2many(
        string='No SC',
        comodel_name='sale.order',
        relation='shipping_ins_nosc_order_rel',
        column1='shipping_ins_id',
        column2='order_id',
    )
	
    available_order_line_ids = fields.Many2many(
        string='Available Order Line',
        comodel_name='sale.order.line',
        relation='shipping_ins_available_order_line_order_rel',
        column1='shipping_ins_id',
        column2='order_line_id', 
            compute='_compute_available_order_line_ids' )

    @api.depends('no_sc_ids.order_line')
    def _compute_available_order_line_ids(self):
        for shipping_ins in self:
            order_lines = shipping_ins.no_sc_ids.mapped('order_line')
            shipping_ins.available_order_line_ids = order_lines
			
    @api.onchange('no_sc_ids')
    def onchange_no_sc_ids(self):
        if self.no_sc_ids:
            self.product_line_ids = [(5, 0, 0)] # remove existing lines
            lines = []
            for rec in self.no_sc_ids.order_line.filtered(lambda r: r.product_id.type != 'service'):
                vals = {
                    'product_id' : rec.product_id.id,
                    'product_uom_qty' : rec.product_uom_qty,
                    'qty_delivered' : rec.qty_delivered,
                    'reserved' : rec.product_uom_qty,
                    'name'  : rec.name,
                    'william_fob_price' : rec.william_fob_price,
                    'william_set_price' : rec.william_set_price,
                    'sku' : rec.sku,


                }
                lines.append((0,0,vals))
            self.product_line_ids = lines
			
	def action_validate(self):
		packing_list = self.env['packing.list'].create({
                # 'delivery_address_id': self.delivery_address_id.id,
                # 'to_partner_country_id': self.to_partner_country_id.id,
                'no_sc_ids' : self.no_sc_ids,
                'available_order_line_ids' : self.available_order_line_ids,
				
invoice
                <field name="no_sc_ids" widget="many2many_tags"/>
                            <field name="no_sc_ids" domain="[('state', '=', 'sale')]" widget="many2many_tags"/>
				
PI
                        <field name="order_ids" invisible="1"/>
                            <field name="no_sc_ids" domain="[('partner_id', '=', to_partner_id),('state', '=', 'sale')]" attrs="{ 'invisible': [('to_partner_id','=', False)] }" widget="many2many_tags"/>
                            <field name="available_order_line_ids" invisible="1"/>
SI
                            <field name="to_partner_id" widget="res_partner_many2one" context="{'res_partner_search_mode': 'customer', 'show_address': 1}" options="{&quot;always_reload&quot;: True}"  attrs="{'readonly': [('state', '=', 'done')]}" required="1" />
                            <field name="no_sc_ids" domain="[('partner_id', '=', to_partner_id),('state', '=', 'sale')]" attrs="{ 'invisible': [('to_partner_id','=', False)] }" widget="many2many_tags"/>
                            <field name="available_order_line_ids" widget="many2many_tags" invisible="1"/>