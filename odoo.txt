./ckwi-addons
./odoo14/server/odoo/addons

 jidoka_export/views/stock_move_views.xml       |   9 ++
 jidoka_marketing/views/sale.xml                |   1 +
 jidoka_sale/views/sc_revisi.xml                | 110 ++++++++++++++

init=py,conf=restart & manifest=csv,xml=upgrade - .xml can change .py=restart
update apps/favorite dashboard/install
addons: 1 directory before modul, 1 coma
'psql not found' pg_path
pgadmin user pwd odoo16pwd=conf db_user = odoo install user pwd, privileges=blue icon
master pwd (X admin)=.conf admin_passwd "access denied"
git > odoo16 > postgresql 15 > pgadmin port random 5432 8069 8072>properties create 
environment>edit>path C:\jidoka\odoo16\phyton & \Scripts 
.\server python .\odoo-bin 
.\odoo_training_jidoka python .\odoo-bin scaffold jidokaacademy
python .\odoo-bin -u modulename (/data) -c .\odoo.conf -d databasename --stop-after-init
main>dev>clone>HTTP>main>dev/dev-raditya
merge/pull>dev-r/dev>compare>uncheck delete>create>ask/merge
git pull>upgrade - depends ['stock', 'base']
Reyhan: qa_qc/level.aql/categ_id = Many2one product = depends ['product']
'depends': ['base','crm','product', 'stock', 'resource','sale','jidoka_marketing','sale_crm','mrp','report_xlsx','hr'],
design_process - crm_sample_request - jidoka_marketing
debug=odoo running on >edit>model, external - object=foreach/inheret, method=button
msu_rooster = search menu: technical/views model, click views, find "ir_holiday" = msu_holiday
clone staging2 > python -m pip install "PyJWT===1.7.1" simplejson pyfcm xlsxwriter --user/copy lib/site-packages> restore database
upgrade: 1st view > 2nd menuitem

✓ Demo=auto dummy=long load
-modular: fields & override, cons, method & override
-delegation: link record of models to parent
compute=based field, dependencies=computed based computed 
onchange=warning invalid value
make value without adding to database:
constraints verified invariant by python/SQL
emp_id = error Python
	
constraint
@api.constrains('rounding') : Method yang memiliki decorator ini berfungsi untuk membuat constraints (pengecekan batasan/aturan) value sebuah field
if self.rounding <= 0:
    raise ValidationError

sql constrains - attribute class
_sql_constraints = [
	('name_description_check', 'CHECK(name != description)', 'The title of the course should not be the description'),
	('name_unique', 'UNIQUE(name)', 'Category name must be unique!'),
]

inventory/transfer & purchase/order = purchase/stock_picking.xml
method: button_validate ('grading_done', '=', True)

rnd_flow/wiz/design_detail state-s
samwill/wiz/_multi_line
design_process, crm_sample, marketing/wiz/approval & contract_review
inventory, manufacturing,  material/wiz/tag_card
_sale/sale.py
odoo/sale/sale.py
/mail/mail_activity.py state =

widget="priority"/"radio"/"selection"=X create edit/readonly='1'
.Float(digit=(12,6), track_visibility='onchange')
.Datetime/Dateorder
<width="33"> default
after, before, replace, inside menyisipkan, attribute: readonly/domain
invisible, required, column_invisible

	self.write({'state': 'draft_to_approval'})
	OR
	if self.state == 'to_approve':
		self.state = 'approved'

status noupdate=True > False

		advanced view/default btn Filters
		<record id="jidokaacademy.course_view_search" model="ir.ui.view">
			<field name="name">jidokaacademy.course.view.search</field>
			<field name="model">jidokaacademy.course</field>
			<field name="arch" type="xml">
		inherit view = no <form> 
				<search string="Search Description">
					<field name="name"></field>
						<filter name="my_course" string="Active"
							domain="[('user_id', '=', uid)]"/>
						<group string="Group By">
							<filter name="group_by_user" string="Responsible"
								context="{'group_by': 'user_id'}"/>
						</group> </search></field></record>
						
		<field model>hr.contract</field>
			<field name="tax_id" widget="many2one/many2many_tags" options="{'no_create_edit':True}" optional="hide"/"show"/> 3 titik
			<field name="user_id" widget="many2one_avatar_user"/>
		.=@name='order_line'
		form//field=form/group/group
		tree/field
		_sale/sale.xml .line
		<xpath expr="//notebook/page[]/field[]/tree[1]/field[@name='name']" position="after">
		<field name="" attrs="{'column_invisible': [('parent.state','not in',['.'])]}"/>
		Open: Order Lines
		<xpath expr="//notebook/page[]/field[]/form/group/group[2]" position="replace">
		<field name="" attrs="{'invisible': [('state','not in',('.'))] }"/>
		unknown
		<xpath expr="//notebook/page[]/field[]/form/group/group/field[@name='product_id']">
		<xpath expr="//field[]/form//field[@name='product_id']">
		<xpath expr="//field[]/tree/field[@name='name']">
		<xpath expr="//field[]/tree">
		<xpath expr="//notebook/page[]/field/tree/field[@name='product_template_id']">
		
		<xpath expr="//field[@name='default_code']" position="after"> 
			<field name="code"/>
		<xpath expr="//field[@name='origin']" position="attributes">
			<attribute name="string">Source Document</attribute>
			<attribute name="attrs">{ 'readonly': [('state','in',('assigned','grading','done','cancel'))], 'invisible': [('is_tagcard','=', True)]} </attribute></xpath>
		OR <invisible="1"/> <force_save="1"/>
		OR <position="inside">
			<button type="object"  name="action_view_grading_summary" class="oe_stat_button"
				icon="fa-list" attrs="{'invisible':['|', ('grading_summary_count', '=', 0), ('state', 'not in', ('assigned','grading','done'))]}">
				<field name="grading_summary_count" widget="statinfo" string="Grading Summary"/>
				<field name='grading_summary_ids' invisible="1"/>
			</button></xpath>
						
btn top right corner: 
<div name="button_box" position="inside">
	<button class="oe_stat_button" attrs="{'invisible'}" type="object" name= icon="fa-comment">
		<field string= name=" widget="statinfo"/></button></div>
		
column invisible = unless written on state-s

in button states = if self.field not 
ValidationError("")

    _name = 'design.detail.bom.line' size_panjang = fields.Float("P") size_lebar = fields.Float("L") size_tebal = fields.Float("T")
    
    @api.depends('size_panjang', 'size_lebar','size_tebal','product_qty')
    def get_calc(self):
        for cal in self:
            meter3 = cal.size_panjang * cal.size_lebar * cal.size_tebal
            meter2 = (cal.size_panjang * cal.size_lebar) + (cal.size_panjang * cal.size_tebal) + (cal.size_lebar * cal.size_tebal)
    # size_cm
    #       cal.total_meter_cubic = ((meter3) / 1000000) * cal.product_qty if meter3 > 0 else 0.00
    #       cal.total_meter_persegi = ((meter2) / 10000) * cal.product_qty if meter2 > 0 else 0.00
    # size_mm
            cal.total_meter_cubic = ((meter3) / 1000000000) * cal.product_qty if meter3 > 0 else 0.00
            cal.total_meter_persegi = ((meter2) / 1000000) * cal.product_qty if meter2 > 0 else 0.0

desin_process/product.product
size = fields.Selection([('size_cm', 'cm'),('size_mm', 'mm'),], 'Dimensi Uom')
    @api.depends('rasio', 'size','size_panjang','size_lebar', 'size_tebal')
    def get_calc_mcubic(self):
        for record in self:
            if record.size == 'size_cm':
                record.total_meter_cubic = (((record.size_panjang * record.size_lebar) * record.size_tebal )/ record.rasio)  / 1000000 if record.rasio != 0 else 0.00
            else:
                record.total_meter_cubic = (((record.size_panjang * record.size_lebar) * record.size_tebal ) / record.rasio) / 1000000000 if record.rasio != 0 else 0.00
    @api.depends('rasio', 'size','size_panjang','size_lebar', 'size_tebal')
    def get_calc_mpersegi(self):
        for record in self:
            if record.size == 'size_cm':
                record.total_meter_persegi = (((record.size_panjang/record.rasio) * (record.size_lebar/record.rasio)* 2 ) + ((record.size_panjang/record.rasio) * (record.size_tebal/record.rasio) * 2 ) + ((record.size_lebar/record.rasio) * (record.size_tebal/record.rasio) * 2 ))/ 10000 if record.rasio != 0 else 0.00
            else:
                record.total_meter_persegi = (((record.size_panjang/record.rasio) * (record.size_lebar/record.rasio)* 2 ) + ((record.size_panjang/record.rasio) * (record.size_tebal/record.rasio) * 2 ) + ((record.size_lebar/record.rasio) * (record.size_tebal/record.rasio) * 2 ))/ 1000000 if record.rasio != 0 else 0.00
		
unit internal: botol & unit subcount: liter, ml they both connect
fleet.vehicle: X model V views of module

design_process/manufacture_order.py mrp.bom = total_meter_ mrp.bom.line = total_meter_1
/static/src/xml
							
fik_equipment_maintenance/m_timetable
start_d
end_d
interval.Integer & i_step: Day/Week/Month/Year
m_t_horizon.Integer & t_step: Day/Week/Month/Year

last_poll = fields.Datetime('Last Poll', default=lambda self: fields.Datetime.now())
method = def
store=True, computed = Save can give back old value

class Picking(models.Model):
    _name = "stock.picking"
    show_check_availability = fields.Boolean
    show_validate = fields.Boolean
	show_c = fields.Boolean
	
	def generate_operation(self):
        self.show_check_availability= False
        self.show_c = False
        self.show_validate = False
        
			<field name="model">stock.picking</field>
				<field name="show_check_availability" invisible="1"/>
                <field name="show_validate" invisible="1"/>
                    <button name="action_assign" attrs="{'invisible': [('show_check_availability', '=', False)]}" string="Check Availability" type="object" class="oe_highlight" groups="base.group_user"/><button name="button_validate" attrs="{'invisible': ['|', ('state', 'not in', ('waiting', 'confirmed')), ('show_validate', '=', False)]}" string="Validate" type="object" groups="stock.group_stock_user" class="o_btn_validate"/>
			<field name="show_c" invisible="1"/>
			<xpath expr="//header/button[@name='button_validate'][1]" position="attributes">
				<attribute name="attrs">{'invisible': ['|','|',('is_kayu','=', True),('show_validate','=', False), ('show_c','=', False)]}</attribute>
			<xpath expr="//button[@name='action_assign']" position="attributes">
				<attribute name="attrs">{'invisible': [('show_c', '=', False)]}</attribute>
			</xpath>
 
<notebook><page string=>
Line 1st=<field><tree><field>
Under it = <group><div><label></div><field></group><div>
field icon trash = <div class="oe_clear"/>
OR
<group string=>
2-3rd Form = <field><tree><field>
Under it = ...
<div class="oe_chatter"> 
============================================================================================================================================================================

	many_source_document_ids Many2one >
	= fields.Many2many(comodel_name='stock.picking', relation='packing_picking_rel', compute='_compute_many_source_document_ids')
	= delete all method containing it
	
    @api.depends('packing_id.no_sc_id.order_line')
    def _compute_mo_no(self):
        for record in self:                                                 #Access
            record.mo_no = record.packing_id.no_sc_id.order_line.no_mo
			
                            <field name="many_source_document_ids" domain > widget="many2many_tags"/>
							
	_name = 'operation.container.line'
	no_sc_ids = fields.Many2many('stock.picking', 'no_sc_ids_rel', 'container_line_id', 'picking_id', compute='_compute_no_sc_ids', store=True)
    many_no_sc_ids = fields.Many2many('stock.picking', 'many_no_sc_ids_rel', 'container_line_id', 'picking_id', store=True)
			
									<field name="no_sc_ids" widget="many2many_tags" invisible="1"/>
                                    <field name="many_no_sc_ids" widget="many2many_tags" domain="[('id', 'in', no_sc_ids)]"/>
			
	
	_name = 'packing.list'
	no_sc_id = fields.Many2one('sale.order', 'SC No.')	
	source_document_ids = fields.Many2many('stock.picking', compute='_compute_source_document_ids')								
	@api.depends('no_sc_id')
    def _compute_source_document_ids(self):
        for record in self:
            if record.delivery_address_id:
                record.source_document_ids = self.env['stock.picking'].search([
                    ('origin', '=', record.nosc_name),
                    ('state', '=', 'done'),
                    ('picking_type_code', '=', 'outgoing')])
            else:
                record.source_document_ids = False
				
	inspection:/data
===========================================================================================================================================================================	

attachment document qa_qc/.xml
									<group name="ditolak"  attrs="{'invisible' : [('keputusan', '!=', 'tolak')]}" class="oe_row">
                                    <label for="attachment_doc" string="Attachment Document" />
                                    <div class="d-flex ">
                                       <field name="attachment_doc"  widget="pdf_viewer" style="margin-right:20px;"/> <field name="attachment_doc"  widget="pdf_viewer"/></div></group>
                                     <group name="ditolak"  attrs="{'invisible' : [('keputusan', '!=', 'tolak')]}" class="oe_row">
                                       <label for="attachment_doc" string="Attachment Document" />
                                    <div class="d-flex ">
                                       <field name="attachment_doc"  widget="pdf_viewer" style="margin-right:20px;"/> <field name="attachment_doc"  widget="pdf_viewer"/></div></group>

user issue = make user based ciptackwi's rnd@gmail.com
Record does not exist or has been deleted. (Record: res.partner(19,), User: 19) = partner_id = fields.Many2one("res.partner","Customer")
	_name = 'design.process'
	def action_confirm(self):
        return {
                'name' : _("Confirm With Comment"),'view_type' : 'form',
                'res_model' : 'approval.history.rnd.wizard',
                'view_mode' : 'form','type':'ir.actions.act_window','target': 'new',
            }

	_name = "approval.history.rnd.wizard"
    def action_confirm(self):
	lead.message_post(author_id=user.id,body=(message),message_type='notification',subtype_xmlid="mail.mt_comment",notification_ids=notification_ids,
                           partner_ids=[user.partner_id.id] if user.partner_id else []
                       )									

_export's invoice data on packing_list
1. send to _export's invoice > 2. send to _accounting's invoice
export's invoice=penampung - cause some fields/data isn't exist on _accounting's invoice = error

Rest API: JPayroll >< Odoo >< Mobile ESS: E Self Service

report packing_list, invoice: MO number > 
smart button
= d detail/design group: 4x <kanban><form> = kanban view click > view form
report rnd/sample

	<record model="ir.actions.act_window" id="action_design_process_design">
      <field name="name">Spec Design</field>
      <field name="res_model">design.process</field>
      <field name="view_mode">kanban,tree,form</field>
      <field name="domain">[('type_rnd', '=', 'is_design')]</field>
    </record>

    <record model="ir.actions.act_window" id="action_design_process_sample">
      <field name="name">Sample Request</field>
      <field name="res_model">design.process</field>
      <field name="view_mode">kanban,tree,form</field>
      <field name="domain">[('type_rnd', '=', 'is_sample')]</field>
    </record>
	
menu A action A <menuitem id="" parent = 'design_process_sub_menu' name="Spec. Design" action="design_process.action_design_process_design"/>
menu B action B <menuitem id="" parent = 'design_process_sub_menu' name="Sample Request" action="design_process.action_design_process_sample"/>

tree-form AB: invisible: type_a = false
risky: inherit, deleting code
mandatory <xpath expr="//field[@name='']" position="attributes"><attribute name="required">1</attribute></xpath>
		<field name="" required="1"/>
.py oe_chatter = recreate can't refresh tabs
override=draft already but need included
<xpath expr="//field[@name='location_dest_id']" position="attributes">
    <attribute name="attrs">{'readonly': [('state', 'not in', ['draft', 'waiting', 'confirmed', 'grading', 'assigned', 'done', 'cancel'])]}</attribute></xpath>
avoid singleton: if else: self.order_line[0].no_mo
auto string if no set: no_pi = No Pi
push: change of jidoka_sale/sale.order.line/name

seq: crm.sample

qa_qc/inspection. SC: have ~total of item UNFINISHED
    no_mo_id = fields.Many2one('sale.order', string='No. SC')
	product_tmpl_ids = fields.Many2many('product.product', 'tag_card_product_tmpl_rel', 'tag_id', 'product_id', string='Item Product', compute='_compute_product_tmpl_ids')
    product_id_domain_ids = fields.Many2many('product.product', 'tag_card_product_domain_rel_1', 'tag_id', 'product_id', readonly=False, string='Item Product')
    available_products = fields.Many2many('product.product', 'tag_card_product_domain_rel_2', 'tag_id', 'product_id', compute='_compute_available_products', store=True,readonly=False)
	
	@api.depends('product_id_domain_ids')
    def _compute_available_products(self):
        for record in self:
            record.available_products = self._get_default_available_products()

    @api.model
    def default_get(self, fields_list):
        defaults = super().default_get(fields_list)
        if 'available_products' in fields_list:
            defaults['available_products'] = self._get_default_available_products()
        return defaults

    def _get_default_available_products(self):
        previous_record = self.search([], order='id desc', limit=1)
        if previous_record:
            return previous_record.available_products + self.product_id_domain_ids
        return self.product_id_domain_ids
		
	def _compute_product_tmpl_ids(self):
        for record in self:
            if record.no_mo_id:
                product_ids = record.no_mo_id.order_line.mapped('product_id')
                domain = [('id', 'in', product_ids.ids), ('id', 'not in', record.available_products.ids)]
                record.product_tmpl_ids = self.env['product.product'].search(domain)
                if not record.product_tmpl_ids:
                    record.no_mo_id = False
            else:
                record.product_tmpl_ids = False

    @api.onchange('no_mo_id')
    def _onchange_no_mo_id(self):
        selected_ids = self.search([('no_mo_id', '!=', False)]).filtered(lambda r: r.state == 'sale').mapped('no_mo_id').ids
        domain = [('id', 'not in', selected_ids), ('state', '=', 'sale')]
        return {'domain': {'no_mo_id': domain}}
		
							<field name="no_mo_id"  domain="[('state', '=', 'sale')]"  attrs="{'readonly': [('state','in',('confirm'))]}"/>
                            <field name="product_id_domain_ids" options="{'no_create': True, 'no_create_edit': True}" widget="many2many_tags" domain="[('id', 'in', product_tmpl_ids)]" attrs="{'readonly': [('state', 'in', ['confirm'])], 'invisible': [('no_mo_id', '=', False)]}"/>
                            <field name="available_products" invisible="1"/>
                            <field name="product_tmpl_ids" domain="[('id', 'not in', available_products)]" widget="many2many_tags" invisible="1"/>
	
tambahan di export
- SC sudah dipilih pada dokumen 1 maka ketika membuat SI baru dengan SC yg sama akn langsung tampil sisa produk yg sudah dipilih sebelumnya
ex : SI001 > pilih SC001 (ada 10 product) > yg dipilih product 1 2 3 4 5 6
SI001 > pilih SC001 > yg tampil sisa dari product yang belum dibuatkan SI nya > sisa product 7 8 9 10
- SI validate tetap di form SI dengan tanda 1 pada smart button packing list, biarkan masuk ke PL dengan klik manual oleh user

SI=Shipping Ins
PL=Packing List